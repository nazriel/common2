module derelict.fmod.fmoddsp;

private import derelict.fmod.fmodtypes;

/*
    DSP callbacks
*/
version(Windows) {
    extern(Windows):
} else {
    extern(C):
}

alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state)FMOD_DSP_CREATECALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state)FMOD_DSP_RELEASECALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state)FMOD_DSP_RESETCALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state, float *inbuffer, float *outbuffer, uint length, int inchannels, int outchannels)FMOD_DSP_READCALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state, uint pos)FMOD_DSP_SETPOSITIONCALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state, int index, float value)FMOD_DSP_SETPARAMCALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state, int index, float *value, char *valuestr)FMOD_DSP_GETPARAMCALLBACK;
alias FMOD_RESULT  function(FMOD_DSP_STATE *dsp_state, void *hwnd, int show)FMOD_DSP_DIALOGCALLBACK;


enum
{
    FMOD_DSP_TYPE_UNKNOWN,
    FMOD_DSP_TYPE_MIXER,
    FMOD_DSP_TYPE_OSCILLATOR,
    FMOD_DSP_TYPE_LOWPASS,
    FMOD_DSP_TYPE_ITLOWPASS,
    FMOD_DSP_TYPE_HIGHPASS,
    FMOD_DSP_TYPE_ECHO,
    FMOD_DSP_TYPE_FLANGE,
    FMOD_DSP_TYPE_DISTORTION,
    FMOD_DSP_TYPE_NORMALIZE,
    FMOD_DSP_TYPE_PARAMEQ,
    FMOD_DSP_TYPE_PITCHSHIFT,
    FMOD_DSP_TYPE_CHORUS,
    FMOD_DSP_TYPE_REVERB,
    FMOD_DSP_TYPE_VSTPLUGIN,
    FMOD_DSP_TYPE_WINAMPPLUGIN,
    FMOD_DSP_TYPE_ITECHO,
    FMOD_DSP_TYPE_COMPRESSOR,
    FMOD_DSP_TYPE_SFXREVERB,
    FMOD_DSP_TYPE_LOWPASS_SIMPLE,
    FMOD_DSP_TYPE_FORCEINT = 65536,
}
alias int FMOD_DSP_TYPE;


struct FMOD_DSP_PARAMETERDESC
{
    float min;
    float max;
    float defaultval;
    char [16]name;
    char [16]label;
    char *description;
}


struct FMOD_DSP_DESCRIPTION
{
    char [32]name;
    uint _version;
    int channels;
    FMOD_DSP_CREATECALLBACK create;
    FMOD_DSP_RELEASECALLBACK release;
    FMOD_DSP_RESETCALLBACK reset;
    FMOD_DSP_READCALLBACK read;
    FMOD_DSP_SETPOSITIONCALLBACK setposition;
    int numparameters;
    FMOD_DSP_PARAMETERDESC *paramdesc;
    FMOD_DSP_SETPARAMCALLBACK setparameter;
    FMOD_DSP_GETPARAMCALLBACK getparameter;
    FMOD_DSP_DIALOGCALLBACK config;
    int configwidth;
    int configheight;
    void *userdata;
}


struct FMOD_DSP_STATE
{
    FMOD_DSP *instance;
    void *plugindata;
}


enum
{
    FMOD_DSP_OSCILLATOR_TYPE,
    FMOD_DSP_OSCILLATOR_RATE,
}
alias int FMOD_DSP_OSCILLATOR;


enum
{
    FMOD_DSP_LOWPASS_CUTOFF,
    FMOD_DSP_LOWPASS_RESONANCE,
}
alias int FMOD_DSP_LOWPASS;


enum
{
    FMOD_DSP_ITLOWPASS_CUTOFF,
    FMOD_DSP_ITLOWPASS_RESONANCE,
}
alias int FMOD_DSP_ITLOWPASS;


enum
{
    FMOD_DSP_HIGHPASS_CUTOFF,
    FMOD_DSP_HIGHPASS_RESONANCE,
}
alias int FMOD_DSP_HIGHPASS;


enum
{
    FMOD_DSP_ECHO_DELAY,
    FMOD_DSP_ECHO_DECAYRATIO,
    FMOD_DSP_ECHO_MAXCHANNELS,
    FMOD_DSP_ECHO_DRYMIX,
    FMOD_DSP_ECHO_WETMIX,
}
alias int FMOD_DSP_ECHO;


enum
{
    FMOD_DSP_FLANGE_DRYMIX,
    FMOD_DSP_FLANGE_WETMIX,
    FMOD_DSP_FLANGE_DEPTH,
    FMOD_DSP_FLANGE_RATE,
}
alias int FMOD_DSP_FLANGE;


enum
{
    FMOD_DSP_DISTORTION_LEVEL,
}
alias int FMOD_DSP_DISTORTION;


enum
{
    FMOD_DSP_NORMALIZE_FADETIME,
    FMOD_DSP_NORMALIZE_THRESHHOLD,
    FMOD_DSP_NORMALIZE_MAXAMP,
}
alias int FMOD_DSP_NORMALIZE;


enum
{
    FMOD_DSP_PARAMEQ_CENTER,
    FMOD_DSP_PARAMEQ_BANDWIDTH,
    FMOD_DSP_PARAMEQ_GAIN,
}
alias int FMOD_DSP_PARAMEQ;


enum
{
    FMOD_DSP_PITCHSHIFT_PITCH,
    FMOD_DSP_PITCHSHIFT_FFTSIZE,
    FMOD_DSP_PITCHSHIFT_OVERLAP,
    FMOD_DSP_PITCHSHIFT_MAXCHANNELS,
}
alias int FMOD_DSP_PITCHSHIFT;


enum
{
    FMOD_DSP_CHORUS_DRYMIX,
    FMOD_DSP_CHORUS_WETMIX1,
    FMOD_DSP_CHORUS_WETMIX2,
    FMOD_DSP_CHORUS_WETMIX3,
    FMOD_DSP_CHORUS_DELAY,
    FMOD_DSP_CHORUS_RATE,
    FMOD_DSP_CHORUS_DEPTH,
    FMOD_DSP_CHORUS_FEEDBACK,
}
alias int FMOD_DSP_CHORUS;


enum
{
    FMOD_DSP_REVERB_ROOMSIZE,
    FMOD_DSP_REVERB_DAMP,
    FMOD_DSP_REVERB_WETMIX,
    FMOD_DSP_REVERB_DRYMIX,
    FMOD_DSP_REVERB_WIDTH,
    FMOD_DSP_REVERB_MODE,
}
alias int FMOD_DSP_REVERB;


enum
{
    FMOD_DSP_ITECHO_WETDRYMIX,
    FMOD_DSP_ITECHO_FEEDBACK,
    FMOD_DSP_ITECHO_LEFTDELAY,
    FMOD_DSP_ITECHO_RIGHTDELAY,
    FMOD_DSP_ITECHO_PANDELAY,
}
alias int FMOD_DSP_ITECHO;


enum
{
    FMOD_DSP_COMPRESSOR_THRESHOLD,
    FMOD_DSP_COMPRESSOR_ATTACK,
    FMOD_DSP_COMPRESSOR_RELEASE,
    FMOD_DSP_COMPRESSOR_GAINMAKEUP,
}
alias int FMOD_DSP_COMPRESSOR;


enum
{
    FMOD_DSP_SFXREVERB_DRYLEVEL,
    FMOD_DSP_SFXREVERB_ROOM,
    FMOD_DSP_SFXREVERB_ROOMHF,
    FMOD_DSP_SFXREVERB_ROOMROLLOFFFACTOR,
    FMOD_DSP_SFXREVERB_DECAYTIME,
    FMOD_DSP_SFXREVERB_DECAYHFRATIO,
    FMOD_DSP_SFXREVERB_REFLECTIONSLEVEL,
    FMOD_DSP_SFXREVERB_REFLECTIONSDELAY,
    FMOD_DSP_SFXREVERB_REVERBLEVEL,
    FMOD_DSP_SFXREVERB_REVERBDELAY,
    FMOD_DSP_SFXREVERB_DIFFUSION,
    FMOD_DSP_SFXREVERB_DENSITY,
    FMOD_DSP_SFXREVERB_HFREFERENCE,
    FMOD_DSP_SFXREVERB_ROOMLF,
    FMOD_DSP_SFXREVERB_LFREFERENCE,
}
alias int FMOD_DSP_SFXREVERB;


enum
{
    FMOD_DSP_LOWPASS_SIMPLE_CUTOFF,
}
alias int FMOD_DSP_LOWPASS_SIMPLE;
